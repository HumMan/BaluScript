class TMainClass
{
	enum TestEnumerationName
	{
		ENUM_0,
		ENUM_1,
		ENUM_2,
		ENUM_3,
		ENUM_4,
		ENUM_5,
		ENUM_6,
		ENUM_7
	}
	class sealed int
	{
	private:
		dword unnamed;
	public:
		constr(int v) bytecode{};
		constr(float v) bytecode{ASM_FLOAT_TO_INT;};
		
		operator static = (int& l,int r)bytecode{ASM_ASSIGN 0,1;};
		operator static +=(int& l,int r)bytecode{ASM_INT_PLUS_A;};
		operator static -=(int& l,int r)bytecode{ASM_INT_MINUS_A;};
		operator static *=(int& l,int r)bytecode{ASM_INT_MUL_A;};
		operator static /=(int& l,int r)bytecode{ASM_INT_DIV_A;};
		operator static %=(int& l,int r)bytecode{ASM_INT_MOD_A;};

		operator static +(int l,int r):int bytecode{ASM_INT_PLUS;};
		operator static -(int l,int r):int bytecode{ASM_INT_MINUS;};
		operator static *(int l,int r):int bytecode{ASM_INT_MUL;};
		operator static /(int l,int r):int bytecode{ASM_INT_DIV;};
		operator static %(int l,int r):int bytecode{ASM_INT_MOD;};

		operator static -(int  l):int bytecode{ASM_INT_UNARY_MINUS;};
		operator static -(int& l):int bytecode{ASM_R_INT_UNARY_MINUS;};

		operator static < (int l,int r):bool bytecode{ASM_INT_LESS;};
		operator static <=(int l,int r):bool bytecode{ASM_INT_LESS_EQ;};
		operator static ==(int l,int r):bool bytecode{ASM_EQUAL 0,0,1;};
		operator static !=(int l,int r):bool bytecode{ASM_NOT_EQUAL 0,0,1;};
		operator static > (int l,int r):bool bytecode{ASM_INT_GREATER;};
		operator static >=(int l,int r):bool bytecode{ASM_INT_GREATER_EQ;};

		conversion static (int& v):float bytecode{ASM_R_INT_TO_FLOAT;};
		conversion static (int  v):float bytecode{ASM_INT_TO_FLOAT;};
		conversion static (int& v):bool  bytecode{ASM_R_INT_TO_BOOL;};
		conversion static (int  v):bool  bytecode{ASM_INT_TO_BOOL;};
	}
	func static Abs(int v		):int bytecode{ASM_INT_ABS;};
	func static Max(int v0,int v1):int bytecode{ASM_INT_MAXIMUM;};
	func static Min(int v0,int v1):int bytecode{ASM_INT_MINIMUM;};
	func static Sign(int v		):int bytecode{ASM_INT_SIGN;};

	class sealed float
	{
	private:
		dword unnamed;
	public:
		constr(float v) bytecode{};
		
		operator static = (float& l,float r)bytecode{ASM_ASSIGN 0,1;};
		operator static +=(float& l,float r)bytecode{ASM_FLOAT_PLUS_A;};
		operator static -=(float& l,float r)bytecode{ASM_FLOAT_MINUS_A;};
		operator static *=(float& l,float r)bytecode{ASM_FLOAT_MUL_A;};
		operator static /=(float& l,float r)bytecode{ASM_FLOAT_DIV_A;};

		operator static +(float l,float r):float bytecode{ASM_FLOAT_PLUS;};
		operator static -(float l,float r):float bytecode{ASM_FLOAT_MINUS;};
		operator static *(float l,float r):float bytecode{ASM_FLOAT_MULT;};
		operator static /(float l,float r):float bytecode{ASM_FLOAT_DIV;};

		operator static -(float  l):float bytecode{ASM_FLOAT_UNARY_MINUS;};
		operator static -(float& l):float bytecode{ASM_R_FLOAT_UNARY_MINUS;};

		operator static < (float l,float r):bool bytecode{ASM_FLOAT_LESS;};
		operator static <=(float l,float r):bool bytecode{ASM_FLOAT_LESS_EQ;};
		operator static ==(float l,float r):bool bytecode{ASM_EQUAL 0,0,1;};
		operator static !=(float l,float r):bool bytecode{ASM_NOT_EQUAL 0,0,1;};
		operator static > (float l,float r):bool bytecode{ASM_FLOAT_GREATER;};
		operator static >=(float l,float r):bool bytecode{ASM_FLOAT_GREATER_EQ;};

		conversion static (float& v):bool  bytecode{ASM_R_FLOAT_TO_BOOL;};
		conversion static (float  v):bool  bytecode{ASM_FLOAT_TO_BOOL;};
	}
	func static Abs		(float v):float bytecode{ASM_FLOAT_ABS;};
	func static Asin	(float v):float bytecode{ASM_FLOAT_ASIN;};
	func static Acos	(float v):float bytecode{ASM_FLOAT_ACOS;};
	func static Atan	(float v):float bytecode{ASM_FLOAT_ATAN;};
	func static Ceil	(float v):float bytecode{ASM_FLOAT_CEIL;};
	func static Clamp	(float min,float max,float v):float bytecode{ASM_FLOAT_CLAMP;};
	func static Cos		(float v):float bytecode{ASM_FLOAT_COS;};
	func static DegToRad(float v):float bytecode{ASM_FLOAT_DEG_TO_RAD;};
	func static Exp		(float v):float bytecode{ASM_FLOAT_EXP;};
	func static Floor	(float v):float bytecode{ASM_FLOAT_FLOOR;};
	func static Frac	(float v):float bytecode{ASM_FLOAT_FRAC;};
	func static Log		(float v):float bytecode{ASM_FLOAT_LOG;};
	func static Log2	(float v):float bytecode{ASM_FLOAT_LOG2;};
	func static Log10	(float v):float bytecode{ASM_FLOAT_LOG10;};
	func static Max		(float v0,float v1):float bytecode{ASM_FLOAT_MAX;};
	func static Min		(float v0,float v1):float bytecode{ASM_FLOAT_MIN;};
	func static Pow		(float v,float pow):float bytecode{ASM_FLOAT_POW;};
	func static RadToDeg(float v):float bytecode{ASM_FLOAT_RAD_TO_DEG;};
	func static Randf():float bytecode{ASM_FLOAT_RAND;};
	func static Sign	(float v):float bytecode{ASM_FLOAT_SIGN;};
	func static Sin		(float v):float bytecode{ASM_FLOAT_SIN;};
	func static Sqrt	(float v):float bytecode{ASM_FLOAT_SQRT;};
	func static Sqr		(float v):float bytecode{ASM_FLOAT_SQR;};
	func static Tan		(float v):float bytecode{ASM_FLOAT_TAN;};
	func static Trunc	(float v):float bytecode{ASM_FLOAT_TRUNC;};

	func static Print	(float v) bytecode{ASM_FLOAT_PRINT;};

	class sealed bool
	{
	private:
		dword unnamed;
	public:
		constr(bool v) bytecode{};
		operator static = (bool& l,bool r)bytecode{ASM_ASSIGN 0,1;};

		operator static ==(bool l,bool r):bool bytecode{ASM_EQUAL 0,0,1;};
		operator static !=(bool l,bool r):bool bytecode{ASM_NOT_EQUAL 0,0,1;};
		operator static &&(bool l,bool r):bool bytecode{ASM_BOOL_AND;};
		operator static ||(bool l,bool r):bool bytecode{ASM_BOOL_OR;};
		operator static ! (bool l):bool bytecode{ASM_BOOL_NOT;};

		conversion static (bool& v):float bytecode{ASM_R_INT_TO_FLOAT;};
		conversion static (bool  v):float bytecode{ASM_INT_TO_FLOAT;};
		conversion static (bool  v):int bytecode{};
	}

	class TDynArray<T>
	{
		TDynArrayInternalFields unnamed;
		constr
		{
			bytecode{ASM_R_DYN_ARR_DEF_CONSTR CreateArrayElementClassId(T);};
		}
		constr(TDynArray& use_source)
		{
			bytecode{ASM_RR_DYN_ARR_COPY_CONSTR;};
		}
		destr
		{
			bytecode{ASM_R_DYN_ARR_DESTR;};
		}
		operator static [](TDynArray& v,int id):&T
			bytecode{ASM_RV_DYN_ARR_GET_ELEMENT;};
		operator static =(TDynArray& left,TDynArray& right)//TODO шаблонный класс не имеет доступа к своему шаблону(нельзя объявить this шаблон с другими параметрами т.к. он воспринимается как класс)
		{
			bytecode{ASM_DYN_ARR_ASSIGN 1;};
		}
		operator static =(TDynArray& left,TDynArray right)
		{
			bytecode{ASM_DYN_ARR_ASSIGN 0;};
		}
		operator static ==(TDynArray& left,TDynArray& right):bool
		{
			bytecode{ASM_DYN_ARR_EQUAL 1,1;};
		}
		operator static ==(TDynArray& left,TDynArray right):bool
		{
			bytecode{ASM_DYN_ARR_EQUAL 1,0;};
		}
		operator static ==(TDynArray left,TDynArray& right):bool
		{
			bytecode{ASM_DYN_ARR_EQUAL 0,1;};
		}
		operator static ==(TDynArray left,TDynArray right):bool
		{
			bytecode{ASM_DYN_ARR_EQUAL 0,0;};
		}
		func SetHigh(int high)	bytecode{ASM_RV_DYN_ARR_SET_HIGH;};
		func GetHigh:int		bytecode{ASM_R_DYN_ARR_GET_HIGH;};
	}

	class T
	{
		enum Types
		{
			dsfsdf,
			dslfkj,
			ee,
			dsf
		}
		int static v;
		int ddd;
		class T1
		{
			constr
			{
				T.v=333;
			}
			constr(int vdd)
			{
				v=vdd;
			}
			T v3;
			int v;
		}
	}
	int static counter;
	class Def<T1>
	{
		T1 yep;
		constr
		{
			yep=counter;
		}
		destr
		{
			int dsd=yep+counter;
			yep=counter;
			yep=1;
		}
		//func static F(TTemplateTest<int>.Vata i)
		//{
		//}
	}
	class TTemplateTest<T1>
	{
		T1 k1,k2;
		class Vata
		{
			dword ssss;
		}
	}
	func static Power(int x, int p):int	
		if(p)return x*Power(x,p-1);
		else return 1;
	func static Main
	{
		{
			TTemplateTest<TTemplateTest<TTemplateTest<int>>> temp_test,temp_test2;
			temp_test=temp_test2;
			temp_test.k1.k1.k1=54;
			temp_test2.k1.k1.k1=54;
			Print(temp_test.k1.k1.k1);
		}
		{
			TDynArray<int> dyn_test,dyn_test2;
			TDynArray<TDynArray<int>> dyn_dyn_test;
			dyn_dyn_test.SetHigh(2);
			dyn_dyn_test[0].SetHigh(2);
			dyn_test.SetHigh(50);
			dyn_test[0]=5;
			for(int i=0;i<=dyn_test.GetHigh();i+=10)
				dyn_test[i]=i+(-2);
			dyn_test2=dyn_test;
		}
		{float dsfsdf=Sin(34)+3*(34+Cos(15)-2);}
		{float dsfsdf=Sin(34)+3*(34+Cos(15)-2);}
		{float dsfsdf=Sin(34)+3*(34+Cos(15)-2);}
		{float dsfsdf=Sin(34)+3*(34+Cos(15)-2);}
		{float dsfsdf=Sin(34)+3*(34+Cos(15)-2);}
		{float dsfsdf=Sin(34)+3*(34+Cos(15)-2);}
		{float dsfsdf=Sin(34)+3*(34+Cos(15)-2);}
		{float dsfsdf=Sin(34)+3*(34+Cos(15)-2);}
		{float dsfsdf=Sin(34)+3*(34+Cos(15)-2);}
		{float dsfsdf=Sin(34)+3*(34+Cos(15)-2);}
		{float dsfsdf=Sin(34)+3*(34+Cos(15)-2);}
		{float dsfsdf=Sin(34)+3*(34+Cos(15)-2);}
		{float dsfsdf=Sin(34)+3*(34+Cos(15)-2);}
		{float dsfsdf=Sin(34)+3*(34+Cos(15)-2);}
		{float dsfsdf=Sin(34)+3*(34+Cos(15)-2);}
		{float dsfsdf=Sin(34)+3*(34+Cos(15)-2);}
		{float dsfsdf=Sin(34)+3*(34+Cos(15)-2);}
		{float dsfsdf=Sin(34)+3*(34+Cos(15)-2);}
		{float dsfsdf=Sin(34)+3*(34+Cos(15)-2);}
		{float dsfsdf=Sin(34)+3*(34+Cos(15)-2);}
		{float dsfsdf=Sin(34)+3*(34+Cos(15)-2);}
		{
			bool safds(1+4.0);
			TTemplateTest<
				TTemplateTest<
				TTemplateTest<
				Def<
				int
				>
				>
				>
			> 
			temp_test;
			temp_test.k1.k1.k1.yep=3;
			TTemplateTest<dword> temp_test2;
			TTemplateTest<dword>.Vata temp_test254;
			T.T1 vvv3(324);
			Print(vvv3.v);
			T.T1 vvv;
			T.v = 34;
			vvv.v3.ddd=4;
			vvv.v =332;
			float x(3);
			x=2+3;
			int intval(3);
			bytecode
			{
				ASM_PUSH 11111111;
				ASM_PUSH 4;
				ASM_INT_MUL;
				ASM_INT_TO_FLOAT;
				ASM_FLOAT_PRINT;
			};
			intval=45;
			{
				TTemplateTest<TTemplateTest<T>> temp_testdsdd;
				intval=23;
				x=(intval+7+8)/2.0;
				Print(x);
				x=x+intval;
			}
			Print(x);
			Print(Power(2,16));
			for(int i=0;i<10;i+=1)
				Print(Pow(3,i));
		}
		float adsflkselj=11110;
		Print(adsflkselj);
	}
}
