
class TMainClass
{
	class TCustomVec{
	public:
		int[10] static ssd;
		class LocalType
		{
			int[30] d;
		}
	
		constr 
		{
			v.SetHigh(1);
			v[0]=0.0;
			v[1]=0.0;
		}
	
		constr(float use_x,float use_y)
		{
			v.SetHigh(1);
			v[0]=use_x;
			v[1]=use_y;
		}
		//private:
		destr
		{
			v[0]=0.0;
			v[1]=0.0;
		}
		public:
		operator static +=(TCustomVec& left,TCustomVec& right)
		{
			left.v[0]+=right.v[0];
			left.v[1]+=right.v[1];
		}
		operator static +=(TCustomVec& left,TCustomVec right)
		{
			left.v[0]+=right.v[0];
			left.v[1]+=right.v[1];
		}
	
		operator static ==(TCustomVec left,TCustomVec right):bool
		{
			return (left.v[0]==right.v[0]&&left.v[1]==right.v[1]);
		}
	
		operator static =(TCustomVec& left,TCustomVec& right)
		{
			left.v[0]=right.v[0];
			left.v[1]=right.v[1];
		}
	public:
		operator static =(TCustomVec& left,TCustomVec right)
		{
			left.v[0]=right.v[0];
			left.v[1]=right.v[1];
		}
		operator static [](TCustomVec& left,int id):&float
		{
			return left.v[id];
		}
		conversion static (TCustomVec& left):vec2
		{
			return vec2(left.v[0],left.v[1]);
		}
	private:
		func GetX:float	return v[0];
		func GetX(float& result)result=v[0];
	public:
		func GetY:float	return v[1];
		func GetY(float& result)result=v[1];
		func GetCopy:float[] return v;
	protected:
		float[] v;
	}
	class NN:TCustomVec
	{
	}
	class TColor
	{
	private:
		float r,g,b;
	public:
		constr
		{
			r=0.0;
			b=0.0;
		}
		
		func Init
		{
			r=100.0;
			g=120.0;
			b=130.0;
		}
		func P
		{
			Print(r);
			Print(g);
			Print(b);
		}
	}
	class Base
	{
	protected:
		int[] v;
		int ds;
	}
	class R:Base
	{
		int e;
		TColor[][10] re;
		constr
		{
			v.SetHigh(2);
			e=123;
			v.SetHigh(2);
			ds=3;
			this.e=e;
		}
		func SS
		{
			for(int i=0;i<10;i+=1)
			{
				re[i].SetHigh(10);
				for(int k=0;k<10;k+=1)
					re[i][k].Init();
			}
		}
		func P
		{
			for(int i=0;i<10;i+=1)
			{
				re[i].SetHigh(10);
				for(int k=0;k<10;k+=1)
					re[i][k].P();
			}
		}
	}
	func static Factorial(int f):int
	{
		int result=1;
		for(int i=2;i<=f;i+=1)
			result*=i;
		return result;
	}
	class Base2
	{
		int t;
		float v;
	}
	enum TKeyStates
	{
		LEFT,
		SHIFT
	}
	class MethodTest
	{
		class TBaseClass:TCustomVec
		{
		private:
			int[] some_members,some_members1,some_members2;
		public:
			constr
			{
				Print("TBaseClass construct\n");
			}
		private:
			constr(TBaseClass& copy_from)
			{
				Print("TBaseClass copy\n");
			}
		public:
			destr
			{
				Print("TBaseClass destroy\n");
			}
			func Print
			{
				//for(int i=0;i<=v.High;i+=1)
				for(int i=0;i<=v.High();i+=1)
				{
					Print(v[i]);
				}
				Print("\n");
			}
		}
		func static Start
		{
			Print("MethodTest Start\n");
			{
				TBaseClass[] v;
				v.SetHigh(2);
				TBaseClass[] vv(v);
				v[0].Print();
			}
			Print("MethodTest End\n");
		}
	}
	class TReadClass
	{
	private:
		int Val3;
	readonly:
		int Val;
	public:
		int Val2;
		func Get:TCustomVec[3]
		{
			TCustomVec[3] v;
			return v;
		}
		constr
		{
			TCustomVec[3] dd=Get();
			Val=112;
			Val2=332;
			Val3=12;
			{
				TCustomVec s1;
				{
					TCustomVec s2;
					{
						TCustomVec s3;
						{
							TCustomVec s4;
							{
								TCustomVec s5;
								{
									TCustomVec s6;
									return;
								}
							}
						}
					}
				}
			}
		}
	}
	class TRecord
	{
		int[5] dds;
		int v;
		int[5] dds2;
		vec2 v2;
		int[5] dds3;
		func static Get:TRecord
		{
			TRecord r;
			r.v=2;
			r.v2=vec2(5,6);
			return r;
		}
	}
	func static Main
	{
		{
			Print(TRecord.Get().v);
			Print(TRecord.Get().v2[0]);
			Print(TRecord.Get().v2[1]);
		}
		{
			TReadClass c;
			c.Val2=4;
			Print(c.Val);
			//c.Val=3;
			//c.Val3=4;
			if(1)Print(1);
		}
		if(false||true&&(false||true&&true)&&15<65)
		{
			int static i;
			i=103;
			Print(i);
		}

		{
			//for(;true;)
			//{
			//	int static i;
			//}
			for(int i=0;i<5;i+=1)
			{
				int static k;
				k+=1;
				Print(k);
			}
			for(int i=0;i<5;i+=1)
			{
				TCustomVec vv(i+4.0,i-5.0);
				vv+=TCustomVec(0.5,0.6);
				Print(vv[1]);
				vec2 static v(i+1.0,i+5.0);
				v+=1;
				Print(v[0]);
				Print(v[1]);
				int static k=5;
				k+=1;
				Print(k);
			}
		}

		MethodTest.Start();

		int aa1;
		float a1;
		a1=a1*aa1;
		float wer=5.0;
		vec2 dfadaf(wer);
		dfadaf=dfadaf*wer;
		TKeyStates curr_key=TKeyStates.LEFT;
		char ce='\n';
		Base2 gfb,fga;
		gfb=fga;
		TColor ddd;
		ddd.P();
		Print(Factorial(8));
		int x=(Factorial(3));

		//if(curr_key==TKeyStates.SHIFT)
		//{
		//	Print("SHIFT\n");
		//}else if(curr_key==TKeyStates.LEFT)
		//{
		//	Print("LEFT\n");
		//}
		//for(int i=0;i<=1;i+=1)
		//Print("Рома лучший в LA2\n");

		//Print(Sqrt(3600));

		////TCustomVec.LocalType t;
		//Print(TCustomVec.ssd);
		//float[] float_arr;
		//R[] obj_arr;
		//obj_arr.SetHigh(1);
		//obj_arr[0].SS;
		//obj_arr[1].SS;
		//TCustomVec a(1.0,1.0);
		//TCustomVec b(4.0,4.0);
		//Print(a.GetY);
		//TCustomVec c(2.0,0.0);
		//c+=a;
		//c+=TCustomVec(3.0,10.0);
		//vec2 tt=c;
		//Print(tt[0]);
		//Print(tt[1]);
		//Print(c.GetX);
		//Print(c.GetY);
		//Print(c[0]);
		//Print(c[1]);

		TCustomVec a(1.0,5.0),ee;
		TCustomVec.ssd[0]=0;
		Print(TCustomVec.ssd[0]);
		TCustomVec c(2.0,110.0);
		Print(c.GetY());
		if(a==c)Print("\na==c");
		else Print("\na!=c");
		a=c;
		a=TCustomVec(2.0,110.0);
		if(a==c)Print("\na==c");
		else Print("\na!=c");
	}
}

//
//class TMainClass
//{
//	class TV
//	{
//		int v;
//		constr
//		{
//			Print("TV.constr\n");
//			v=5;
//		}
//		//constr(TV& copy_from)
//		//{
//		//	Print("TV.copy_constr\n");
//		//	v=copy_from.v;
//		//}
//		destr
//		{
//			Print("TV.destr\n");
//			v=6;
//		}
//		operator static ==(TV &left,TV &right):bool
//		{
//			Print("TV.Operator==\n");
//			Print(left.v);
//			Print(right.v);
//			return left.v==right.v;
//		}
//	}
//	func static Get:TV[]
//	{
//		TV[] v;
//		v.SetHigh(2);
//		return v;
//	}
//	func static Get2:TV[2]
//	{
//		TV[2] v;
//		return v;
//	}
//	class TTT
//	{
//		int v;
//	}
//	func static Main
//	{
//		TTT v3;
//		TTT vvv(v3);
//		{
//			TV[2] v;
//			TV[2] vv(v);
//			TV[2] vv2(Get2());
//			int i=0;
//			if(v==vv)
//				Print("v==vv\n");
//			if(v==Get2())
//				Print("v==Get2()\n");
//			if(Get2()==vv)
//				Print("Get2()==vv\n");
//			if(Get2()==Get2())
//				Print("Get2()==Get2()\n");
//		}
//		{
//			TV[] v;
//			v.SetHigh(2);
//			TV[] vv(v);
//			TV[] vv2(Get());
//			int i=0;
//			if(v==vv)
//				Print("v==vv\n");
//			if(v==Get())
//				Print("v==Get()\n");
//			if(Get()==vv)
//				Print("Get()==vv\n");
//			if(Get()==Get())
//				Print("Get()==Get()\n");
//		}
//	}
//}