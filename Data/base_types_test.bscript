class TGame 
{
	class sealed int
	{
	private:
		dword unnamed;
	public:
		constr(int v) bytecode{};
		constr(float v) bytecode{ASM_FLOAT_TO_INT;};
		
		operator static = (int& l,int r)bytecode{ASM_ASSIGN 0,1;};
		operator static +=(int& l,int r)bytecode{ASM_INT_PLUS_A;};
		operator static -=(int& l,int r)bytecode{ASM_INT_MINUS_A;};
		operator static *=(int& l,int r)bytecode{ASM_INT_MUL_A;};
		operator static /=(int& l,int r)bytecode{ASM_INT_DIV_A;};
		operator static %=(int& l,int r)bytecode{ASM_INT_MOD_A;};

		operator static +(int l,int r):int bytecode{ASM_INT_PLUS;};
		operator static -(int l,int r):int bytecode{ASM_INT_MINUS;};
		operator static *(int l,int r):int bytecode{ASM_INT_MUL;};
		operator static /(int l,int r):int bytecode{ASM_INT_DIV;};
		operator static %(int l,int r):int bytecode{ASM_INT_MOD;};

		operator static -(int  l):int bytecode{ASM_INT_UNARY_MINUS;};
		operator static -(int& l):int bytecode{ASM_R_INT_UNARY_MINUS;};

		operator static < (int l,int r):bool bytecode{ASM_INT_LESS;};
		operator static <=(int l,int r):bool bytecode{ASM_INT_LESS_EQ;};
		operator static ==(int l,int r):bool bytecode{ASM_EQUAL 0,0,1;};
		operator static !=(int l,int r):bool bytecode{ASM_NOT_EQUAL 0,0,1;};
		operator static > (int l,int r):bool bytecode{ASM_INT_GREATER;};
		operator static >=(int l,int r):bool bytecode{ASM_INT_GREATER_EQ;};

		conversion static (int& v):float bytecode{ASM_R_INT_TO_FLOAT;};
		conversion static (int  v):float bytecode{ASM_INT_TO_FLOAT;};
		conversion static (int& v):bool  bytecode{ASM_R_INT_TO_BOOL;};
		conversion static (int  v):bool  bytecode{ASM_INT_TO_BOOL;};
	}
	func static Abs(int v		):int bytecode{ASM_INT_ABS;};
	func static Max(int v0,int v1):int bytecode{ASM_INT_MAXIMUM;};
	func static Min(int v0,int v1):int bytecode{ASM_INT_MINIMUM;};
	func static Sign(int v		):int bytecode{ASM_INT_SIGN;};

	class sealed float
	{
	private:
		dword unnamed;
	public:
		constr(float v) bytecode{};
		
		operator static = (float& l,float r)bytecode{ASM_ASSIGN 0,1;};
		operator static +=(float& l,float r)bytecode{ASM_FLOAT_PLUS_A;};
		operator static -=(float& l,float r)bytecode{ASM_FLOAT_MINUS_A;};
		operator static *=(float& l,float r)bytecode{ASM_FLOAT_MUL_A;};
		operator static /=(float& l,float r)bytecode{ASM_FLOAT_DIV_A;};

		operator static +(float l,float r):float bytecode{ASM_FLOAT_PLUS;};
		operator static -(float l,float r):float bytecode{ASM_FLOAT_MINUS;};
		operator static *(float l,float r):float bytecode{ASM_FLOAT_MULT;};
		operator static /(float l,float r):float bytecode{ASM_FLOAT_DIV;};

		operator static -(float  l):float bytecode{ASM_FLOAT_UNARY_MINUS;};
		operator static -(float& l):float bytecode{ASM_R_FLOAT_UNARY_MINUS;};

		operator static < (float l,float r):bool bytecode{ASM_FLOAT_LESS;};
		operator static <=(float l,float r):bool bytecode{ASM_FLOAT_LESS_EQ;};
		operator static ==(float l,float r):bool bytecode{ASM_EQUAL 0,0,1;};
		operator static !=(float l,float r):bool bytecode{ASM_NOT_EQUAL 0,0,1;};
		operator static > (float l,float r):bool bytecode{ASM_FLOAT_GREATER;};
		operator static >=(float l,float r):bool bytecode{ASM_FLOAT_GREATER_EQ;};

		conversion static (float& v):bool  bytecode{ASM_R_FLOAT_TO_BOOL;};
		conversion static (float  v):bool  bytecode{ASM_FLOAT_TO_BOOL;};
	}
	func static Abs		(float v):float bytecode{ASM_FLOAT_ABS;};
	func static Asin	(float v):float bytecode{ASM_FLOAT_ASIN;};
	func static Acos	(float v):float bytecode{ASM_FLOAT_ACOS;};
	func static Atan	(float v):float bytecode{ASM_FLOAT_ATAN;};
	func static Ceil	(float v):float bytecode{ASM_FLOAT_CEIL;};
	func static Clamp	(float min,float max,float v):float bytecode{ASM_FLOAT_CLAMP;};
	func static Cos		(float v):float bytecode{ASM_FLOAT_COS;};
	func static DegToRad(float v):float bytecode{ASM_FLOAT_DEG_TO_RAD;};
	func static Exp		(float v):float bytecode{ASM_FLOAT_EXP;};
	func static Floor	(float v):float bytecode{ASM_FLOAT_FLOOR;};
	func static Frac	(float v):float bytecode{ASM_FLOAT_FRAC;};
	func static Log		(float v):float bytecode{ASM_FLOAT_LOG;};
	func static Log2	(float v):float bytecode{ASM_FLOAT_LOG2;};
	func static Log10	(float v):float bytecode{ASM_FLOAT_LOG10;};
	func static Max		(float v0,float v1):float bytecode{ASM_FLOAT_MAX;};
	func static Min		(float v0,float v1):float bytecode{ASM_FLOAT_MIN;};
	func static Pow		(float v,float pow):float bytecode{ASM_FLOAT_POW;};
	func static RadToDeg(float v):float bytecode{ASM_FLOAT_RAD_TO_DEG;};
	func static Randf():float bytecode{ASM_FLOAT_RAND;};
	func static Sign	(float v):float bytecode{ASM_FLOAT_SIGN;};
	func static Sin		(float v):float bytecode{ASM_FLOAT_SIN;};
	func static Sqrt	(float v):float bytecode{ASM_FLOAT_SQRT;};
	func static Sqr		(float v):float bytecode{ASM_FLOAT_SQR;};
	func static Tan		(float v):float bytecode{ASM_FLOAT_TAN;};
	func static Trunc	(float v):float bytecode{ASM_FLOAT_TRUNC;};

	func static Print	(float v) bytecode{ASM_FLOAT_PRINT;};

	class sealed bool
	{
	private:
		dword unnamed;
	public:
		constr(bool v) bytecode{};
		operator static = (bool& l,bool r)bytecode{ASM_ASSIGN 0,1;};

		operator static ==(bool l,bool r):bool bytecode{ASM_EQUAL 0,0,1;};
		operator static !=(bool l,bool r):bool bytecode{ASM_NOT_EQUAL 0,0,1;};
		operator static &&(bool l,bool r):bool bytecode{ASM_BOOL_AND;};
		operator static ||(bool l,bool r):bool bytecode{ASM_BOOL_OR;};
		operator static ! (bool l):bool bytecode{ASM_BOOL_NOT;};

		conversion static (bool& v):float bytecode{ASM_R_INT_TO_FLOAT;};
		conversion static (bool  v):float bytecode{ASM_INT_TO_FLOAT;};
		conversion static (bool  v):int bytecode{};
	}
	
	class Test
	{
		int vss;
	public:
		int v,v1,v2;
	}
	
	class Test2
	{
	public:
		Test v;
	}
	class Test3
	{
	public:
		Test2 v;
	}
	
	func static SomeFunc(int a,int b):int
	{
		int result;
		result = a+b;
		return result;
	}
	func static Main2
	{
		{
			int a,b;
			a=3;
			b=a+4;
			Print(b);
			Print(SomeFunc(a,b));
		}
		{
			int a;
			a=5;
			Print(a);
		}
		{
			int a;
			a=5+6;
			Print(a);
		}
		{
			int a,b,c;
			a=5+6+1+2+3;
			Print(a);
			Print(Sqrt(16));
			Print(Sin(90*3.1415926/180));
			b=54+a;
			Print(b);
			c=23+b-a;
			Print(c);
		}
	}
	func static Main
	{
		{
			Print(SomeFunc(5,6));
			bool sss ;
			sss = Sin(1);
			int z;
			int a,b,c(z);
			b = 2;
			c = 4;
			a = (b + c)*b;
			Print(a);
			int d=a,e=5;
			Print(d);
			Print(e);
			d = a+b*c/e+(-e);
			Print(d);
			float v0,v1,v2=a;
			v0=Sin(d+Cos(Trunc(v2)));
			float bdd = false;
			Print(v0);
		}
	}
}